import sqlite3
import pandas as pd
import joblib
from process_for_predict import process_for_predict
import matplotlib.pyplot as plt
import geopandas as gpd
from shapely.geometry import Point, LineString
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from shapely.wkt import dumps as wkt_dumps

model_lat = joblib.load(r"C:\diplom\python_files\predict_bound\model_lat.pkl")
model_lon = joblib.load(r"C:\diplom\python_files\predict_bound\model_lon.pkl")
input_year = 2025

db_path = "C:/Users/12967/diplom.db"
conn = sqlite3.connect(db_path)

query_telemetry = f"""
SELECT * 
FROM ft_telemetry
WHERE strftime('%Y', timestamp) = '{input_year}'
"""

query_animal = f"""
SELECT a.*
FROM ft_animal a
JOIN ft_telemetry t ON a.telemetry_id = t.telemetry_id
WHERE strftime('%Y', t.timestamp) = '{input_year}'
"""

query = f"""
SELECT t.latitude, t.longitude
FROM ft_animal a
JOIN ft_telemetry t ON a.telemetry_id = t.telemetry_id
WHERE strftime('%Y', t.timestamp) = '{input_year}' AND a.species = 'polar_bear'
"""

ft_animal = pd.read_sql(query_animal, conn)
ft_telemetry = pd.read_sql(query_telemetry, conn)
df = pd.read_sql(query, conn)


def plot_comparison(test_df, title, df_animals, year):
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É –∏ —Å–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏
    grouped = test_df.groupby('year')
    result = []
    
    for year, group in grouped:
        end_points = [Point(lon, lat) for lon, lat in zip(group['longitude_ice'], group['latitude_ice'])]
        end_line = LineString(end_points)
        result.append({'year': year, 'end_line': end_line})
    
    # –°–æ–∑–¥–∞–µ–º GeoDataFrame (—Ö–æ—Ç—è –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ–≥–æ)
    gdf = gpd.GeoDataFrame(result, geometry='end_line')
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
    fig = plt.figure(figsize=(12, 8))
    ax = plt.axes(projection=ccrs.PlateCarree())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω, –æ–∫–µ–∞–Ω—ã –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    ax.add_feature(cfeature.LAND, facecolor='lightgray')
    ax.add_feature(cfeature.OCEAN, facecolor='lightblue')
    ax.add_feature(cfeature.COASTLINE, linewidth=0.5)
    ax.add_feature(cfeature.BORDERS, linestyle=':', linewidth=0.5)
    ax.add_feature(cfeature.LAKES, alpha=0.5, facecolor='lightblue')
    ax.add_feature(cfeature.RIVERS, edgecolor='blue', linewidth=0.5)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö
    if not df_animals.empty:
        ax.scatter(df_animals['longitude'], df_animals['latitude'],
                   color='red', s=10, transform=ccrs.PlateCarree(),
                   label=f'–ñ–∏–≤–æ—Ç–Ω—ã–µ –≤ {year} –≥–æ–¥—É')
    
    # –†–∏—Å—É–µ–º –ª–∏–Ω–∏–∏ (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ)
    for year, line in zip(gdf['year'], gdf['end_line']):
        x, y = line.xy
        ax.plot(x, y, 
                transform=ccrs.PlateCarree(), 
                color='purple',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
                linewidth=2, 
                label=str(year+5))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.xlabel('–î–æ–ª–≥–æ—Ç–∞')
    plt.ylabel('–®–∏—Ä–æ—Ç–∞')
    plt.title(title)
    plt.legend()
    plt.grid(True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    plt.savefig("C:/diplom/python_files/predict_bound/predicted_ice_coordinates.png", 
                dpi=300, bbox_inches='tight')


def prepare_features(df, include_latice=False):
    features = ['latitude_bear', 'longitude_bear', 'days_since_start', 'month', 'day', 'hour']
    if include_latice:
        features.insert(2, 'latitude_ice')
    return df[features]

test_df = process_for_predict(ft_animal, ft_telemetry)
plot_df_bear = df[['latitude', 'longitude']]
now_year = int(input_year)
title = now_year+5
X_test_lat = prepare_features(test_df)
test_df['latitude_ice'] = model_lat.predict(X_test_lat)
X_test_lon = prepare_features(test_df, include_latice=True)
test_df['longitude_ice'] = model_lon.predict(X_test_lon)


# plot_comparison(
#     test_df=test_df,
#     title=f'–ü—Ä–æ–≥–Ω–æ–∑ –≥—Ä–∞–Ω–∏—Ü—ã –º–æ—Ä—Å–∫–æ–≥–æ –ª—å–¥–∞ –Ω–∞ {title} –≥–æ–¥',
#     df_animals=plot_df_bear,
#     year=now_year
# )

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn.execute("""
CREATE TABLE IF NOT EXISTS ft_boundary_predict (
    boundary_id INTEGER PRIMARY KEY AUTOINCREMENT,
    geometry TEXT,
    year INTEGER
)
""")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ LineString –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
grouped = test_df.groupby('year')
insert_rows = []

for year, group in grouped:
    line = LineString(zip(group['longitude_ice'], group['latitude_ice']))
    wkt_line = wkt_dumps(line)
    insert_rows.append((wkt_line, year + 5))  # –ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ 5 –ª–µ—Ç –≤–ø–µ—Ä—ë–¥

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –≥–æ–¥ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
conn.execute("DELETE FROM ft_boundary_predict WHERE year = ?", (title,))
print(f"üóë –£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥–æ–¥–∞ {title} –∏–∑ ft_boundary_predict.")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
conn.executemany("INSERT INTO ft_boundary_predict (geometry, year) VALUES (?, ?)", insert_rows)
conn.commit()
print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(insert_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É ft_boundary_predict.")